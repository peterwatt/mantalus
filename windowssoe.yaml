AWSTemplateFormatVersion: '2010-09-09' 
 
Description: Build customer standard Windows Server 2016 
 
Parameters: 
 
  Size: 
    Type: String 
    Default: m4.large 
  Subnet: 
    Type: AWS::EC2::Subnet::Id 
    Default: subnet-0ebc2462defdf2ad0 
  Keyname:  
    Type: AWS::EC2::KeyPair::KeyName 
    Default: PeterPacker 
  AMI: 
    Type: String 
    Default: ami-0f069b7c1f6d7cba5 
 
Resources: 
 
  MyInstance: 
    Metadata: 
      AWS::CloudFormation::Init: 
        configSets: 
          ascending: 
          - config0 
          - config1 
        # - config2 
          - config99 
        config0: 
          commands: 
            000-domainJoin: 
              command: powershell.exe -ExecutionPolicy Unrestricted c:\customer\software\FirstBoot.ps1 
              waitAfterCompletion: forever 
        config1: 
          commands: 
            001-customersetup: 
              command: powershell.exe -ExecutionPolicy Unrestricted c:\customer\software\SecondBoot.ps1 
              waitAfterCompletion: '0' 
# 
#       Put your commands here: 
#         
        #config2: 
        #  commands: 
        #    001-install-iis: 
        #      command: powershell.exe -ExecutionPolicy Bypass -Command Install-WindowsFeature -name Web-Server -IncludeManagementTools 
        #      waitAfterCompletion: '0' 
        config99: 
          commands: 
            999-signal-complete: 
              command: 
                Fn::Join: 
                - '' 
                - - 'cfn-signal.exe -d %COMPUTERNAME% -s true "' 
                  - Ref: ReadyURL 
                  - '"' 
              waitAfterCompletion: '0' 
    Type: AWS::EC2::Instance 
    Properties: 
      ImageId: !Ref AMI 
      InstanceType: !Ref Size 
      KeyName: !Ref Keyname 
      SubnetId: !Ref Subnet 
      UserData: 
        Fn::Base64: 
          Fn::Join: 
          - '' 
          - - "<script>\ncfn-init.exe -v -s " 
            - Ref: AWS::StackId 
            - " -r MyInstance --configsets ascending --region " 
            - Ref: AWS::Region 
            - "\n</script>" 
 
  ReadyURL: 
    Type: AWS::CloudFormation::WaitConditionHandle 
    Properties: {} 
  WindowsIsReady: 
    Type: AWS::CloudFormation::WaitCondition 
    Properties: 
      Handle: !Ref ReadyURL 
      Timeout: 3600 
 
  Hostname: 
    DependsOn: WindowsIsReady 
    Type: AWS::CloudFormation::CustomResource 
    DeletionPolicy: Retain 
    Properties: 
      ServiceToken: arn:aws:lambda:ap-southeast-2:99999999999:function:tagHostname 
      Payload: 
        Fn::GetAtt: 
        - WindowsIsReady 
        - Data       
 
Outputs: 
  Hostname: 
    Value: !Ref Hostname 
